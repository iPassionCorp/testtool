<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<import resource="classpath:spring-batch-context.xml" />

	<!-- Jobs -->

	<batch:job id="importCompensateidJob">
		<batch:step id="compensateidStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="compensateidItemReader" writer="tlitextDatabaseItemWriter" commit-interval="10000" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	
	
	<batch:job id="importCustomerJob">
		<batch:step id="customerStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="customerItemReader" writer="tlitextDatabaseItemWriter" commit-interval="10000" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	
	
	<batch:job id="importNameJob">
		<batch:step id="nameStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="nameItemReader" writer="tlitextDatabaseItemWriter" commit-interval="10000" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	

	<batch:job id="importPersonJob">
<!-- 		<batch:step id="personStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="personItemReader" writer="tlitextDatabaseItemWriter" commit-interval="10000" />
			</batch:tasklet>
		</batch:step> -->
		<batch:split id="splitPerson" task-executor="asyncTaskExecutor">
			<batch:flow>
				<batch:step id="personStep1">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader1" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep2">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader2" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep3">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader3" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep4">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader4" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep5">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader5" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
<!-- 			<batch:flow>
				<batch:step id="personStep6">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader6" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep7">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader7" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep8">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader8" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep9">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader9" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep10">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader10" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep11">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader11" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep12">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader12" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep13">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader13" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep14">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader14" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow>
			<batch:flow>
				<batch:step id="personStep15">
					<batch:tasklet transaction-manager="transactionManager">
						<batch:chunk reader="personItemReader15" writer="tlitextDatabaseItemWriter" commit-interval="5000" />
					</batch:tasklet>
				</batch:step>
			</batch:flow> -->
		</batch:split>		
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	

	<batch:job id="importPolicyJob">
		<batch:step id="policyStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="policyItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	

	<batch:job id="importCertJob">
		<batch:step id="certStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="certItemReader" writer="tlitextDatabaseItemWriter" commit-interval="1000">
<!-- 					<batch:skippable-exception-classes>
						<batch:include class="org.springframework.batch.item.file.transform.IncorrectLineLengthException"/>
					</batch:skippable-exception-classes> -->
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

	<batch:job id="importDetCertJob">
		<batch:step id="detCertStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="detCertItemReader" writer="tlitextDatabaseItemWriter" commit-interval="1000">
<!-- 					<batch:skippable-exception-classes>
						<batch:include class="org.springframework.batch.item.file.transform.IncorrectLineLengthException"/>
					</batch:skippable-exception-classes> -->
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

	<batch:job id="importCertRiderJob">
		<batch:step id="certRiderStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="certRiderItemReader" writer="tlitextDatabaseItemWriter" commit-interval="1000" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	
	<batch:job id="importCertLinkerJob">
		<batch:step id="certLinkerStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="certLinkerItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

	<batch:job id="importCertMappingJob">
		<batch:step id="certMappingStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="certMappingItemReader" writer="tlitextDatabaseItemWriter" commit-interval="1000" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	
	<batch:job id="importMgClaimJob">
		<batch:step id="mgClaimStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgClaimItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	
	<batch:job id="importMgOrderJob">
		<batch:step id="mgOrderStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgOrderItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	
	<batch:job id="importMgPayJob">
		<batch:step id="mgPayStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgPayItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

	<batch:job id="importMgPayRiderJob">
		<batch:step id="mgPayRiderStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgPayRiderItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	
	<batch:job id="importMgHisJob">
		<batch:step id="mgHisStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgHisItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>			

	<batch:job id="importMgInsMemoJob">
		<batch:step id="mgInsMemoStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgInsMemoItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>
	
	<batch:job id="importMgInterestJob">
		<batch:step id="mgInterestStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgInterestItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	

	<batch:job id="importMgReceiverJob">
		<batch:step id="mgReceiverStep1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="mgReceiverItemReader" writer="tlitextDatabaseItemWriter" commit-interval="100" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>	
	
</beans>